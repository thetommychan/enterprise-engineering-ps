# Logging
$logPath = "\\opnasi02\Server\Tom\scripts\logs\UPMv1.0\error_log.txt"
Start-Transcript $logPath -Append -IncludeInvocationHeader

# Check if running as Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
$adminPrompt = Read-Host -Prompt "Are you running as admin?"
if ($adminPrompt -ne 'y' -or $isAdmin -eq $True) {
    Write-Host -ForegroundColor Black -BackgroundColor Green "Juice is sufficient"
    continue
} else {
    Write-Host -ForegroundColor White -BackgroundColor Red "This script requires admin permissions to run. Please sign in with your admin account and run again."
    continue
}

# Common paths
$scriptsServerPath = "\\opnasi02\Server\Tom\scripts"
$pkgdest = "C:\Program Files\WindowsPowerShell\Modules\PackageManagement"
$psgdest = "C:\Program Files\WindowsPowerShell\Modules\PowerShellGet"
$psrepo = "C:\Users\$env:UserName\AppData\Local\Microsoft\Windows\PowerShell\PowerShellGet"
$house = "C:\Windows\System32"

# Function to copy files and unblock them
function Copy-FilesAndUnblock {
    param (
        [string]$source,
        [string]$destination
    )

    if (Test-Path $source) {
        Copy-Item $source $destination -Recurse -Verbose
        Get-ChildItem $destination -Recurse | Unblock-File -Verbose
        Write-Host -ForegroundColor Black -BackgroundColor Green "Package Management files unblocked and copied from source"
    } else {
        Write-Host "The source is unreachable. Source is $source."
    }
}

# Update Module
function Update-Module {
    param (
        [string]$moduleName,
        [string]$pkgSource,
        [string]$destPath
    )

    if (!(Test-Path "$destPath\$moduleName")) {
        Set-Location $destPath -Verbose
        New-Item -ItemType Directory $moduleName -Verbose
        Copy-FilesAndUnblock -source "$pkgSource\$moduleName\*" -destination "$destPath\$moduleName"
        Set-Location $house -Verbose
    } else {
        Write-Host -ForegroundColor Black -BackgroundColor Green "$moduleName is already updated"
    }
}

# Update PackageManagement and PowerShellGet Modules
Update-Module -moduleName "PackageManagement" -pkgSource "$scriptsServerPath\ps-packages\packagemanagement\1.4.8.1" -destPath $pkgdest
Update-Module -moduleName "PowerShellGet" -pkgSource "$scriptsServerPath\ps-packages\psget\2.2.5" -destPath $psgdest

# Update PowerShell profiles
function Update-Profile {
    param (
        [string]$profilePath,
        [string]$backupPath,
        [string]$newProfilePath
    )

    if (Test-Path $profilePath) {
        if (!(Test-Path $backupPath)) {
            New-Item -ItemType Directory -Path $backupPath
        }
        Copy-Item "$profilePath\Microsoft.PowerShell_profile.ps1" $backupPath -Verbose
        $newestBackup = Get-ChildItem $backupPath | Sort-Object LastWriteTime | Select-Object -Last 1
        $backupName = "${userid}_$(Get-Date -UFormat %d-%m-%Y-%H.%M.%S)_$profileName.ps1"
        $newProfileName = "Microsoft.PowerShell_profile.ps1"
        Copy-Item $newProfilePath $profilePath -Force -Verbose
        Write-Host "New $profileName profile imported, and backup created and stored in $backupPath"
    } else {
        Write-Host -ForegroundColor Black -BackgroundColor Yellow "The updated $profileName does not exist at $newProfilePath, blame Tom"
    }
}

$userid = (Get-WmiObject -Class win32_process | Where-Object name -Match explorer).getowner().user[0]

Update-Profile -profilePath $ps5Profile -backupPath $ps5pbackup -newProfilePath "$scriptsServerPath\Microsoft.PowerShell_profile.ps1" -profileName "PS5"
Update-Profile -profilePath $ps7Profile -backupPath $ps7pbackup -newProfilePath "$scriptsServerPath\ps7\Microsoft.PowerShell_profile.ps1" -profileName "PS7"

# Verify and update PSRepo directory
if (!(Test-Path $psrepo\PSRepositories.xml)) {
    if (!(Test-Path $psrepo)) {
        Set-Location "C:\Users\$env:UserName\AppData\Local\Microsoft\Windows\PowerShell" -Verbose
        New-Item -ItemType Directory PowerShellGet -Force -Verbose
    }
    Set-Location $psrepo -Verbose
    Copy-Item "$scriptsServerPath\ps-packages\psget\2.2.5\PSRepositories.xml" -Destination $psrepo -Force -Verbose
    Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted -Verbose
    Write-Host -ForegroundColor Black -BackgroundColor Green "PowerShell Gallery added as Trusted"
}

# Reset location
Set-Location $house

Write-Host -ForegroundColor Black -BackgroundColor Green "Errors will be reported in the log file"
